# INSTALL Libraries

#for install libraries
!sudo apt install build-essential python-dev libxml2 libxml2-dev zlib1g-dev
!sudo pip install cairocffi
!pip install python-igraph
!pip install louvain



#Import Libraries and set local path

from google.colab import drive
import networkx as nx
import igraph as ig
import louvain
from collections import OrderedDict
import numpy as np
from tqdm import tqdm_notebook as tqdm


drive.mount('/content/gdrive')
baseURL = '/content/gdrive/My Drive/Data Analytics/';



## Code for csv user number trend

nAttack, nTrade, nMessage=edgeNumberTrend(allNetwork)
nUsers=userNumberTrend(allNetwork)


#write trend in a CSV
with open(baseURL+'Dash/userAndEdge_trends_30days.csv', 'w') as csvfile:
    filewriter = csv.writer(csvfile, delimiter=',',quotechar='|', quoting=csv.QUOTE_MINIMAL)
    filewriter.writerow(['day', 'type', 'quantity'])
    
    for i in range(1, 30):
        filewriter.writerow([i, 'nUsers',nUsers[i]])
        filewriter.writerow([i, 'nAttack',nAttack[i]])
        filewriter.writerow([i, 'nTrade',nTrade[i]])
        filewriter.writerow([i, 'nMessage',nMessage[i]])
        
with open(baseURL+'Dash/edgesTrend.csv', 'w') as csvfile:
    filewriter = csv.writer(csvfile, delimiter=',',quotechar='|', quoting=csv.QUOTE_MINIMAL)
    filewriter.writerow(['day', 'type', 'quantity'])
    
    for i in range(1, 30):
        filewriter.writerow([i, 'nAttack',nAttack[i]])
        filewriter.writerow([i, 'nTrade',nTrade[i]])
        filewriter.writerow([i, 'nMessage',nMessage[i]])


####Â WAR 

#find wars between communities in each day
#return a matrix of size [30, 319, 319] where each element [day, comm_A, comm_B] is equal to
#the number of attack edges at day: day from the community comm_A to the community comm_B
def find_wars(attackGraph, day):
    #number max of communities 319
    #matrix of attacks between different communities
    attacks = np.zeros([319, 319]);
    #matrix of attack inside the same community
    rouges = np.zeros([319, 319]);

    #for each edge in the graph
    for e in attackGraph.es():
        
        #att node index
        att = e.tuple[0];
        #att node id
        att = attackGraph.vs[att]['id']
        
        #def node index
        defe = e.tuple[1];
        #def node id
        defe = attackGraph.vs[defe]['id']
        
        #get att and def communities 
        att_comm = attackGraph.vs.select(id = str(att))['Community'];
        defe_comm = attackGraph.vs.select(id = str(defe))['Community'];
        
        #if att and def have a community
        if(len(att_comm) > 0 and len(defe_comm) > 0):
          
            #save the community
            att_comm = att_comm[0];
            defe_comm = defe_comm[0];

            # if att community is different from the def community increase the number of attacks
            if( att_comm != defe_comm):
                attacks[att_comm, defe_comm] += 1;
                
            #else increase the number of rouge attacks
            if( att_comm == defe_comm):
                rouges[att_comm, defe_comm] += 1;
     
    #just some checks
    print('Day: ' + str(day))
    print('Total number of attacks: ' + str(sum(sum(attacks[:,:]))))
    print('max: ')
    print(np.amax(attacks[:,:]))
    print("")
    
    #return the day matrix of attacks and rouges attacks
    return attacks, rouges;

#find the biggest war between 2 communities at day: day      
def find_max_war(attackGraph, day):
  
    #number max of communities 319
    attacks = np.zeros([319, 319]);
    
  #for each edge in the graph
    for e in attackGraph.es():
        
        
        #att node index
        att = e.tuple[0];
        #att node id
        att = attackGraph.vs[att]['id']
        
        #def node index
        defe = e.tuple[1];
        #def node id
        defe = attackGraph.vs[defe]['id']
        
        #get att and def communities 
        att_comm = attackGraph.vs.select(id = str(att))['Community'];
        defe_comm = attackGraph.vs.select(id = str(defe))['Community'];
        
        #if att and def have a community
        if(len(att_comm) > 0 and len(defe_comm) > 0):
          
            #save the community
            att_comm = att_comm[0];
            defe_comm = defe_comm[0];
            
            # if att community is different from the def community increase the number of attacks
            if( att_comm != defe_comm):
                attacks[att_comm, defe_comm] += 1;
           
    for r in range(0, 319):
        for c in range(0,319):
            #where we got the max number of attacks 
            if attacks[r,c] == np.amax(attacks[:,:]):
                print('max number of fight at day: ' + str(day) + ' is from: ' + str(r) + ' to: ' + str(c))
            
                #return the att community and the def community
                return r, c;


#Check which comminities have been dissolved           
def war_change_communities(wars):
  
    #for each day [att, def, day, #member at day, #member at day+1]
    info = np.zeros([35,5])

    print('In memory of these fallen communities: ')
    #dies = np.zeros([30,3])
    i= 0
    j = 0
    #iterare throught the wars matrix
    for day in range(0,30):
      for r in range(0, wars.shape[0]):
        for c in range(wars.shape[1]):
          
            #if we are not at the kast day and if there are enough communities that day (we could not have all the community at some early day)
            if (day < 29 and len(communityAffiliation[day]) >= c):
              
              #if there was a war between r and c  and the community c has something into the member list
              if (wars[day, r, c] >= 1 and len(communityAffiliation[day+1][c][0]) > 0):
                
                #if in the c community will be DISSOLVED the day after the war
                if(communityAffiliation[day+1][c][1] < 1 or communityAffiliation[day+1][c][0][0] == 'DISSOLVED'):
                  
                   #if there are member in the community now and it's not DISSOLVED at the time of the war
                   if(communityAffiliation[day][c][1] >= 1 and len(communityAffiliation[day][c][0]) > 0 and communityAffiliation[day][c][0][0] != 'DISSOLVED'):

                    print('community: ' + str(c) + ' has died after the war with comm: ' + str(r) + ' at day: ' + str(day+1) + ' of 30 days');
                    #add this informations to the info matrix
                    info[i, j] = r;
                    info[i, j+1] = c;
                    info[i, j+2] = day+1;
                    info[i, j+3] = communityAffiliation[day][c][1];
                    info[i, j+4] = 0

                    #dies[i,j] = r;
                    #dies[i,j+1] = c;
                    #dies[i,j+2] = day+1;
                    i += 1;
    print('  ')
    print('| Att, Victim, Day, #OfMembers_Before, #OfMembers_After |')
    print(info)
    return(info)

    '''maxx = 0;
    max_c = 0;
    for day in range(0,30):
      for comm in dies[:,1]:
        if (len(communityAffiliation[day]) > comm):
     
          if (communityAffiliation[day][int(comm)][1] > maxx):
            maxx = communityAffiliation[day][int(comm)][1]
            max_c = comm;

    print(max_c)
    print(maxx)
    for c in dies[:,1]:
      size = 0;
      for day in range(0,30):
        if (len(communityAffiliation[day]) > c):
          if (len(communityAffiliation[day][c][0]) > 0):
            if (communityAffiliation[day][c][1] < 1 or communityAffiliation[day][c][0][0] == 'DISSOLVED'):
              size = 0;
            else:
              size = communityAffiliation[day][c][1];
          print('Community: ' + str(c) + ' at day: ' + str(day) + ' has #member: '+ str(size) )'''

#find for each day who is the most attacked community and which community has attacked it
def max_attacked_community(wars):
  
  #matrix of [community, number of attacks recieved] for each day
  lotte = np.zeros([30, 2])
  
  print('The most attacked community for each day')
  print(' ')
  #for each day
  for day in range(0,30):
    
    #sum all the column getting for each c community how many attacks they have received
    fight = sum(wars[day,:,:])
    
    #get the max number of attacks
    maxi = np.amax(fight)
  
    print('Day: ' + str(day))
    #search which is the community with the max attacks number
    for c in range(0,319):
       
        if (fight[c] == maxi):
            
            print('max attacked community at day: ' + str(day) + ' is the community: ' + str(c))
            #add the community and the number of attacks for each day to the matrix
            lotte[day, 0] = c
            lotte[day, 1] = maxi
  print(' ')
  print('________________________________________________________')
  #comm attaccata, numero di attacchi per ogni giorno
  print('For each day, the most attacked community and the number of attack edge to that community')

  print(lotte)
  print(' ')
  
  #for each day
  print('For each day: show the day number, the attacked community, the community that attack and the number of attack edges ')
  print(' ')
  for day in range(0,30):
    #get the victim community
    vittima = int(lotte[day,0])
    l = []
    #get the number of attacks to the victim from che community row by the wars matrix
    for row in range(0,319):
      attacchi = wars[day, row, vittima]
      #if there were attacks to victim from row
      if attacchi > 0:
        #append [day of attacks, victim, att, #of attacks]
        l.append([day, vittima, row, int(attacchi)])
    print('Day: ' + str(day))
    print(l)
    print(' ')
    
def war_change_leader(war, leaders, attackGraph):
    print('a')
    #if war[day, A, B]
      #if attackGraph(leaders[day, B]).inDegree() > #N attacchi
        #if leaders[day + 1, B] != leaders[day, B]
          #print('B has a new leader after the war at day: ' +  day)
          
          
def search_for_leaders(comm_dict, allianceGraph, AttackGraph):
  print('a')
  #leaders = dict()
  #for node in alliance
    #if node.centrality is


## Create the dictionary for the attacks graph

communityAffiliation = dict()

communityStory = dict()
    
for i in range(0, len(allNetwork)):
    # print(allNetwork[i][4].summary())
    communityAffiliation[i] = addCommunitiesLabel(allNetwork[i][0], i)
    # addCommunitiesLabel(allNetwork[i][3], i)
    print(allNetwork[i][4].summary())
print("")

print("Finito")

## Compute the wars matrix

wars = np.zeros([30, 319, 319]);
rouge = np.zeros([30, 319, 319]);
for i in range(0,30):
    attacks, rouges = find_wars(allNetwork[i][0], i);
    wars[i, :, :] = attacks;
    rouge[i, :, :] = rouges;
print('total number of edges: ')
print(sum(sum(wars[0,:,:])) + sum(sum(rouge[0,:,:])));
print(allNetwork[0][0].summary())


## Find the biggest war at day d

d = 0;
r,c = find_max_war(allNetwork[i][0], d)


## Find which communities have died after a war

war_change_communities(wars);


## Find which communities has attacked the most attacked community for each day
max_attacked_community(wars)


# Do the same for Trades

#find trades between communities in each day
#return a matrix of size [30, 319, 319] where each element [day, comm_A, comm_B] is equal to
#the number of trades edges at day: day from the community comm_A to the community comm_B
def find_trades(tradeGraph, day):
    #number max of communities 319
    #matrix of trades between different communities
    trades = np.zeros([319, 319]);
   

    #for each edge in the graph
    for e in tradeGraph.es():
        
        #src node index
        source = e.tuple[0];
        #src node id
        src = tradeGraph.vs[source]['id']
        
        #dest node index
        destination = e.tuple[1];
        #dest node id
        dest = tradeGraph.vs[destination]['id']
        
        #get source and destination communities 
        src_comm = tradeGraph.vs.select(id = str(src))['Community'];
        dest_comm = tradeGraph.vs.select(id = str(dest))['Community'];
        
        #if att and def have a community
        if(len(src_comm) > 0 and len(dest_comm) > 0):
          
            #save the community
            src_comm = src_comm[0];
            dest_comm = dest_comm[0];

            # if src community is different from the def community increase the number of trades
            if( src_comm != dest_comm):
                trades[src_comm, dest_comm] += 1;
                
            #else increase the number of rouge trades
            if( src_comm == dest_comm):
                rouges[src_comm, dest_comm] += 1;
     
    #just some checks
    print('Day: ' + str(day))
    print('Total number of trades: ' + str(sum(sum(trades[:,:]))))
    print('max: ')
    print(np.amax(trades[:,:]))
    print("")
    
    #return the day matrix of trades and rouges trades
    return trades

#find the biggest war between 2 communities at day: day      
def find_max_trade(tradeGraph, day):
  
    #number max of communities 319
    trades = np.zeros([319, 319]);
    
  #for each edge in the graph
    for e in tradeGraph.es():
        
        
        #src node index
        src = e.tuple[0];
        #src node id
        src = tradeGraph.vs[src]['id']
        
        #def node index
        dest = e.tuple[1];
        #def node id
        dest = tradeGraph.vs[dest]['id']
        
        #get src and def communities 
        src_comm = tradeGraph.vs.select(id = str(src))['Community'];
        dest_comm = tradeGraph.vs.select(id = str(dest))['Community'];
        
        #if src and def have a community
        if(len(src_comm) > 0 and len(dest_comm) > 0):
          
            #save the community
            src_comm = src_comm[0];
            dest_comm = dest_comm[0];
            
            # if src community is different from the def community increase the number of trades
            if( src_comm != dest_comm):
                trades[src_comm, dest_comm] += 1;
           
    for r in range(0, 319):
      for c in range(0,319):
        
        #where we got the max number of trades 
        if trades[r,c] == np.amax(trades[:,:]):
            print('max number of trade at day: ' + str(day) + ' is from: ' + str(r) + ' to: ' + str(c))
            
            #return the src community and the def community
            return r, c;



#find for each day who is the most tradeed community and which community has tradeed it
def max_traded_community(trades):
  
  #matrix of [community, number of trades recieved] for each day
  lotte = np.zeros([30, 2])
  
  print('The most tradeed community for each day')
  print(' ')
  #for each day
  for day in range(0,30):
    
    #sum all the column getting for each c community how many trades they have received
    change = sum(trades[day,:,:])
    
    #get the max number of trades
    maxi = np.amax(change)
  
    print('Day: ' + str(day))
    #search which is the community with the max trades number
    for c in range(0,319):
       
        if (change[c] == maxi):
            
            print('max tradeed community at day: ' + str(day) + ' is the community: ' + str(c))
            #add the community and the number of trades for each day to the matrix
            lotte[day, 0] = c
            lotte[day, 1] = maxi
  print(' ')
  print('________________________________________________________')
  #comm attaccata, numero di attacchi per ogni giorno
  print('For each day, the most tradeed community and the number of trade edge to that community')

  print(lotte)
  print(' ')
  print('________________________________________________________')
  
  #for each day
  print('For each day: show the day number, the tradeed community, the community that trade and the number of trade edges ')
  print(' ')
  for day in range(0,30):
    #get the victim community
    dest = int(lotte[day,0])
    l = []
    #get the number of trades to the victim from che community row by the wars matrix
    for row in range(0,319):
      ntrade = wars[day, row, dest]
      #if there were trades to victim from row
      if ntrade > 0:
        #append [day of trades, victim, att, #of trades]
        l.append([day, dest, row, int(ntrade)])
    print('Day: ' + str(day))
    print(l)
    print(' ')
    

## Create the dictionary for the Trades
communityAffiliationT = dict()

communityStoryT = dict()
    
for i in range(0, len(allNetwork)):
    # print(allNetwork[i][4].summary())
    communityAffiliationT[i] = addCommunitiesLabel(allNetwork[i][2], i)
    # addCommunitiesLabel(allNetwork[i][3], i)
    print(allNetwork[i][4].summary())
print("")

print("Finito")

## Compute the Trade matrix
trades = np.zeros([30, 319, 319]);

for i in range(0,30):
    trade = find_trades(allNetwork[i][2], i);
    print(trade.shape)
    trades[i, :, :] = trade;
print('total number of edges: ')
print(sum(sum(trades[0,:,:])))
print(allNetwork[0][2].summary())

## Find the biggest trade at day d
d = 0;
r,c = find_max_trade(allNetwork[i][2], d)


## Find which communities has traded the most attacked community for each day
max_traded_community(trades)
